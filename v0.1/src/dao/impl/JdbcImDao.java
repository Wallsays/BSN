package dao.impl;

import dao.IMessagesDao;
import model.InstantMessage;
import model.User;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import java.sql.*;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: Dis
 * Date: 02.01.13
 * Time: 16:54
 * To change this template use File | Settings | File Templates.
 */
public class JdbcImDao implements IMessagesDao {
    private static String CREATE_IM_TABLE = "create table BSN_im (\n" +
            "  id bigint generated by default as identity (start with 1) not null primary key,\n" +
            "  sender bigint foreign key REFERENCES BSN_USERS (id),\n" +
            "  recipient bigint foreign key REFERENCES BSN_USERS (id),\n" +
            "  message LONGVARCHAR,\n" +
            "  postTime DATETIME \n" +
            ")";
    private static final String INSERT =
            "insert into PUBLIC.BSN_IM\n" +
                    "(SENDER,RECIPIENT,MESSAGE,POSTTIME)\n" +
                    "        values (?,?,?,?);";
    private static final String GET_ALL_POSTED_MESSAGES =
            "select u.*\n" +
                    "  from public.BSN_IM u\n" +
                    "  where u.SENDER=?;";
    private static final String GET_ALL_RECEIVED_MESSAGES =
            "select u.*\n" +
                    "  from public.BSN_IM u\n" +
                    "  where u.RECIPIENT=?;";
    private static final String DB_DRIVER = "org.hsqldb.jdbcDriver";
    private static final String DB_CONNECTION = "jdbc:hsqldb:file:e:\\temp\\test\\";
    private static final String DB_USER = "sa";
    private static final String DB_PASSWORD = "pass";

    @Override
    public void createDatabase() {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void save(InstantMessage u) {
        try {

            saveMessage(u);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
    }

    private void saveMessage(InstantMessage u) throws SQLException {

        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(INSERT);

            preparedStatement.setLong(1, u.getSender());
            preparedStatement.setLong(2, u.getRecipient());
            preparedStatement.setString(3, u.getMessage());
//            java.util.Date dt = u.getPostTime();
//            java.text.SimpleDateFormat sdf =
//                    new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", new Locale("ru", "RU"));
//            String currentTime = sdf.format(dt);
//            DateTime dt = u.getPostTime();
//            DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
//            DateTimeFormatter rusFmt = fmt.withLocale(new Locale("ru","RU"));
//            String str = rusFmt.print(dt);
//            java.util.Date date = u.getPostTime().toDate();
//            java.text.SimpleDateFormat sdf =
//                    new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", new Locale("ru", "RU"));
//            String currentTime = sdf.format(date);
            DateTime dt = u.getPostTime();
            Calendar jdkCal = dt.toCalendar(new Locale("ru","RU"));
            java.util.Date dt2 = jdkCal.getTime();
            java.text.SimpleDateFormat sdf =
                    new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", new Locale("ru", "RU"));
            String currentTime = sdf.format(dt2);
            preparedStatement.setString(4, currentTime);


            // execute insert SQL stetement
            preparedStatement.executeUpdate();

            System.out.println("Record is inserted into table!");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
    }

    @Override
    public void deleteMessage(InstantMessage u) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public List<InstantMessage> getPostedMessages(Long userId) {
        List<InstantMessage> lst = null;
        try {

            lst = getAllPostedMessages(userId);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        return lst;  //To change body of implemented methods use File | Settings | File Templates.
    }

    private List<InstantMessage> getAllPostedMessages(Long userId) throws SQLException {
        List<InstantMessage> lst = null;
        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(GET_ALL_POSTED_MESSAGES);

            preparedStatement.setLong(1, userId);

            ResultSet mrs = preparedStatement.executeQuery();
            InstantMessage m;
            lst = new ArrayList<InstantMessage>();
            while (mrs.next()) {
                m = new InstantMessage();
                m.setSender(mrs.getLong("SENDER"));
                m.setMessage(mrs.getString("MESSAGE"));
                m.setRecipient(mrs.getLong("RECIPIENT"));
                java.text.DateFormat parser =
                        new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", new Locale("ru", "RU"));
                java.util.Date time = parser.parse(mrs.getString("POSTTIME"));
                DateTime dt = new DateTime(time);
                m.setPostTime(dt);
                lst.add(m);
            }

            System.out.println("Get GET_ALL_POSTED_MESSAGES request complete");

        } catch (ParseException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
        if (lst.size() == 0) return null;
        return lst;  //To change body of created methods use File | Settings | File Templates.
    }

    @Override
    public List<InstantMessage> getRecievedMessages(Long userId) {
        List<InstantMessage> lst = null;
        try {

            lst = getAllRecievedMessages(userId);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        return lst;
    }

    private List<InstantMessage> getAllRecievedMessages(Long userId) throws SQLException {
        List<InstantMessage> lst = null;
        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(GET_ALL_RECEIVED_MESSAGES);

            preparedStatement.setLong(1, userId);

            ResultSet mrs = preparedStatement.executeQuery();
            InstantMessage m;
            lst = new ArrayList<InstantMessage>();
            while (mrs.next()) {
                m = new InstantMessage();
                m.setSender(mrs.getLong("SENDER"));
                m.setMessage(mrs.getString("MESSAGE"));
                m.setRecipient(mrs.getLong("RECIPIENT"));
                java.text.DateFormat sdf =
                        new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                java.util.Date time = sdf.parse(mrs.getString("POSTTIME"));
                DateTime dt = new DateTime(time);
                m.setPostTime(dt);
                lst.add(m);
            }

            System.out.println("Get GET_ALL_POSTED_MESSAGES request complete");

        } catch (ParseException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
        if (lst.size() == 0) return null;
        return lst;  //To change body of created methods use File | Settings | File Templates.

    }

    private static Connection getDBConnection() {

        Connection dbConnection = null;

        try {

            Class.forName(DB_DRIVER);

        } catch (ClassNotFoundException e) {

            System.out.println(e.getMessage());

        }

        try {

            dbConnection = DriverManager.getConnection(
                    DB_CONNECTION, DB_USER, DB_PASSWORD);
            return dbConnection;

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }

        return dbConnection;

    }
}
