package dao.impl;

/**
 * Created by IntelliJ IDEA.
 * User: Dis
 * Date: 01.01.13
 * Time: 19:34
 * To change this template use File | Settings | File Templates.
 */

import dao.IUserDao;
import model.User;
import model.UserRole;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JdbcUserDao implements IUserDao {

    private static final String UPDATE =
            "update contacts set firstname=?, lastname=?, email=?, notes=?, contactGroup=? where id=?";
    private static final String DELETE =
            "delete from contacts where id=?";

    private static final String FIND =
            "select * from contacts where (firstname like ? or lastname like ? or email like ? or notes like ? or contactGroup like ?) order by lastname, firstname";

    private static final String CREATE_CONTACTS_TABLE =
            "create table BSN_users (\n" +
                    "  id bigint generated by default as identity (start with 1) not null primary key,\n" +
                    "  login varchar(30),\n" +
                    "  password varchar(30),\n" +
                    "  fullname varchar(60),\n" +
                    "  avatarUrl varchar(30),\n" +
                    "  UserRole varchar(30),\n" +
                    "  info  LONGVARCHAR\n" +
                    ");";
    private static final String INSERT =
            "insert into PUBLIC.BSN_USERS " +
                    "(login,password,fullname,avatarurl,USERROLE,INFO) " +
                    "values (?,?,?,?,?,?);";
    private static final String GET =
            "select u.*\n" +
                    "  from public.BSN_USERS u\n" +
                    "  where u.LOGIN=?;";
    private static final String GET_BY_ID =
            "select u.*\n" +
                    "  from public.BSN_USERS u\n" +
                    "  where u.ID=?;";
    private static final String GET_ALL_USERS =
            "select u.*\n" +
                    "  from public.BSN_USERS u;";
    private static final String DB_DRIVER = "org.hsqldb.jdbcDriver";
    private static final String DB_CONNECTION = "jdbc:hsqldb:file:e:\\temp\\test\\";
    private static final String DB_USER = "sa";
    private static final String DB_PASSWORD = "pass";

    public void createDatabase() {
        try {
            createDbUserTable();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void createDbUserTable() throws SQLException {

        Connection dbConnection = null;
        Statement statement = null;

        try {
            dbConnection = getDBConnection();
            statement = dbConnection.createStatement();

            System.out.println(CREATE_CONTACTS_TABLE);
            // execute the SQL stetement
            statement.execute(CREATE_CONTACTS_TABLE);

            System.out.println("Table \"BSN_users\" is created!");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (statement != null) {
                statement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }

    }

    @Override
    public void save(User u) {
        try {

            insertRecordIntoTable(u);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
    }

    private static void insertRecordIntoTable(User u) throws SQLException {

        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(INSERT);

            preparedStatement.setString(1, u.getLogin());
            preparedStatement.setString(2, u.getPassword());
            preparedStatement.setString(3, u.getFullName());
            preparedStatement.setString(4, u.getAvatarUrl());
            preparedStatement.setString(5, u.getRole().toString());
            preparedStatement.setString(6, u.getInfo());

            // execute insert SQL stetement
            preparedStatement.executeUpdate();

            System.out.println("Record is inserted into table!");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }

    }

    @Override
    public void delete(Long userId) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public boolean isUserExist(String login) {
        User u = null;
        try {

            u = getUserByLoginFunc(login);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        if (u != null) return true;
        return false;
    }

    private User getUserByLoginFunc(String login) throws SQLException {
        User u = null;
        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(GET);

            preparedStatement.setString(1, login);

            ResultSet mrs = preparedStatement.executeQuery();
            mrs.next();
            String in = mrs.getString("LOGIN");
            if (in.equals(login)) {
                u = new User();
                u.setId(mrs.getLong("ID"));
                u.setLogin(login);
                u.setPassword(mrs.getString("PASSWORD"));
                u.setAvatarUrl(mrs.getString("AVATARURL"));
                u.setFullName(mrs.getString("FULLNAME"));
                if (mrs.getString("USERROLE").equals("ADMIN")) {
                    u.setRole(UserRole.ADMIN);
                } else {
                    u.setRole(UserRole.USER);
                }
                u.setInfo(mrs.getString("INFO"));
            } else {
                System.out.println("Not found");
            }

            System.out.println("Get request complete");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
        return u;

    }

    @Override
    public User getUserByLoginAndPassword(String login, String password) {
        User u = null;
        try {

            u = getUserByLoginAndPasswordFunc(login, password);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        return u;
    }

    private static User getUserByLoginAndPasswordFunc(String login, String password) throws SQLException {
        User u = null;
        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(GET);

            preparedStatement.setString(1, login);

            ResultSet mrs = preparedStatement.executeQuery();
            mrs.next();
            String pass = mrs.getString("PASSWORD");
            if (password.equals(pass)) {
                u = new User();
                u.setId(mrs.getLong("ID"));
                u.setLogin(login);
                u.setPassword(password);
                u.setAvatarUrl(mrs.getString("AVATARURL"));
                u.setFullName(mrs.getString("FULLNAME"));
                if (mrs.getString("USERROLE").equals("ADMIN")) {
                    u.setRole(UserRole.ADMIN);
                } else {
                    u.setRole(UserRole.USER);
                }
                u.setInfo(mrs.getString("INFO"));
            } else {
                System.out.println("Incorrect pass");
            }

            System.out.println("Get request complete");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
        return u;

    }

    @Override
    public User getUserById(Long id) {
        User u = null;
        try {

            u = getUserByIdFunc(id);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        return u;
    }

    private User getUserByIdFunc(Long id) throws SQLException {
        User u = null;
        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(GET_BY_ID);
            preparedStatement.setLong(1, id);

            ResultSet mrs = preparedStatement.executeQuery();
            mrs.next();
            Long ident = mrs.getLong("ID");
            if (ident == id) {
                u = new User();
                u.setId(mrs.getLong("ID"));
                u.setLogin(mrs.getString("LOGIN"));
                u.setPassword(mrs.getString("PASSWORD"));
                u.setAvatarUrl(mrs.getString("AVATARURL"));
                u.setFullName(mrs.getString("FULLNAME"));
                if (mrs.getString("USERROLE").equals("ADMIN")) {
                    u.setRole(UserRole.ADMIN);
                } else {
                    u.setRole(UserRole.USER);
                }
                u.setInfo(mrs.getString("INFO"));
            } else {
                System.out.println("Not found");
            }

            System.out.println("GET_BY_ID request complete");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
        return u;
    }

    @Override
    public User getUserByLogin(String login) {
        User u = null;
        try {

            u = getUserByLoginFunc(login);

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        return u;

    }

    @Override
    public List<User> find(String searchString) {
        return null;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public List<User> getAllUsers() {
        List<User> lst = null;
        try {

            lst = getAllUsersFromDb();

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }
        return lst;
    }

    public List<User> getAllUsersFromDb() throws SQLException{
        List<User> allUsers = null;
        Connection dbConnection = null;
        PreparedStatement preparedStatement = null;
        try {
            dbConnection = getDBConnection();
            preparedStatement = dbConnection.prepareStatement(GET_ALL_USERS);

            ResultSet mrs = preparedStatement.executeQuery();

            allUsers = new ArrayList<User>();

            while(mrs.next()){
                User u = new User();
                u.setId(mrs.getLong("ID"));
                u.setLogin(mrs.getString("LOGIN"));
                u.setPassword(null);
                u.setAvatarUrl(mrs.getString("AVATARURL"));
                u.setFullName(mrs.getString("FULLNAME"));
                if (mrs.getString("USERROLE").equals("ADMIN")) {
                    u.setRole(UserRole.ADMIN);
                } else {
                    u.setRole(UserRole.USER);
                }
                u.setInfo(mrs.getString("INFO"));

                //store all data into a List
                allUsers.add(u);
            }

            System.out.println("GET_ALL_USERS request complete");

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        } finally {

            if (preparedStatement != null) {
                preparedStatement.close();
            }

            if (dbConnection != null) {
                dbConnection.close();
            }

        }
        return allUsers;
    }

    private static Connection getDBConnection() {

        Connection dbConnection = null;

        try {

            Class.forName(DB_DRIVER);

        } catch (ClassNotFoundException e) {

            System.out.println(e.getMessage());

        }

        try {

            dbConnection = DriverManager.getConnection(
                    DB_CONNECTION, DB_USER, DB_PASSWORD);
            return dbConnection;

        } catch (SQLException e) {

            System.out.println(e.getMessage());

        }

        return dbConnection;

    }


}